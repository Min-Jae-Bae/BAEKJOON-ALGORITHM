// 10818번 //
import java.util.Arrays;
import java.util.Scanner;

/**
 * Main
 */
public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt();
        int arr[] = new int[N];

        for (int i = 0; i < N; i++) {
            arr[i] = sc.nextInt();

        }

        Arrays.sort(arr);        // Arrays.sort라는 메소드로 값들을 오름차순으로 정렬한다.
        System.out.println(arr[0] + " " + arr[N - 1]);  // 각각의 인덱스를 출력한다.
    }
}

// 2562번 //
import java.util.Scanner;

/**
 * Main
 */
public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[9];

        for (int i = 0; i < arr.length; i++) {
            arr[i] = sc.nextInt();
        }

        int count = 0; // 카운트를 0으로 초기화
        int max = 0;    // 최댓값을 0으로 초기화
        int index = 0;  // 인덱스 값을 0으로 초기화

        for (int value : arr) { ///  for each 구문으로 for ( 자료형 새로운 배열 이름: 원래 배열)    즉 새로룬 배열에 하나씩 넣음
            count++;            // 하나씩 넣을때 마다 증가

            if (value > max) {  //하나씩 넣는 값인 value가 max 보다 크다면
                max = value;        // 최댓값은 value이다
                index = count;      // index는 최댓값을 찾은 횟수를 말한다.
            }
        }

        System.out.println(max + "\n" + index);

    }
}


// 2577번 //
import java.util.Scanner;

/**
 * Main
 */
public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int A = sc.nextInt();
        int B = sc.nextInt();
        int C = sc.nextInt();

        int multi = (A * B * C);

        String str1 = Integer.toString(multi);          //// charAt은 string 값을 하나씩 뽑아쓰는 것이므로 int형을 string 형으로 바꿔줘야 한다. Integer.toString()

        /* 
        결국에 중요한 것은 0 ~ 9라는 숫자가 모든 자릿수의 값을 비교하기 위해서는 이중 for문을 사용해야 한다.
        즉 0 일때 str1의 각 자릿수의 값들을 비교해야한다. 그리고 같을 경우에 count 횟수를 증가시킨다

        주의할 점은 charAt을 사용할 때 우리가 보는 눈으로 비교하기 위해서는 - '0'을 해야한다는 것이다.
        
        
        */
        for (int i = 0; i < 10; i++) {                 
            int count = 0;
            for (int j = 0; j < str1.length(); j++) {
                if (str1.charAt(j) - '0' == i) {
                    count++;
                }
            }
            System.out.println(count);
        }
    }
}




// 3052번 //
import java.util.HashSet;
import java.util.Scanner;

/**
<HashSet>

Hashset은 중복원소를 허용하지 않는다. 즉 중복되는 원소를 넣을 경우 하나만 저장한다.

결국 HashSet의 사이즈만 알면 되는 것이다.



 */
public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        HashSet<Integer> h = new HashSet<Integer>(); // HashSet<Integer>으로 타입을 Integer로 선선 했기 때문에 int형 또는 interger 객체 넣음

        for (int i = 0; i < 10; i++) {
            h.add(sc.nextInt() % 42);   // 헤쉬셋에 % 42한 나머지를 중복허용하지 않고  넣는 방식이다.
        }
        System.out.println(h.size());   // hsize의 크기를 출력한다.
    }
}

// 1546번 //
import java.util.Arrays;
import java.util.Scanner;

/**
 * Main
 */
public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        double[] arr = new double[sc.nextInt()]; // double 형 배열을 만든다. 안에 입력 받을 정수형을 넣는다.

        for (int i = 0; i < arr.length; i++) {   // 배열안에 숫자들을 하나씩 입력 받는다. (double형)
            arr[i] = sc.nextDouble();
        }

        Arrays.sort(arr);       // 배열 안에 있는 숫자들을 오름차순으로 정렬한다.

        double sum = 0.0;   // 숫자들의 합을 구하기 위해서는 총 합인 sum 변수를 생성하고 0.0 으로 초기화한다. (double 형)
        for (double num : arr) {    // for each 구문으로 for (자료형 새로운배열 이름 : 원래 배열) 새로운 자료형 배열에 원래 있던 배열에 있는 원소를 하니씩 넣는다.
            sum += (num / arr[arr.length - 1] * 100);       // sum += num 합계를 구하는 공식이다 . 우리는 최댓값을 찾아야하기 때문에 원래 배열의 길이에 - 1 해준다.
        }
        double average = sum / arr.length;  // double형 평균 변수를 초기화 하고 공식을 만든다.
        System.out.println(average);    
    }
}
