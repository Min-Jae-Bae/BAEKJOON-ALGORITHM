// 3009번 //
import java.util.Scanner;

/**
 * Main
 */
/**
 * Main
 */
public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] A = { sc.nextInt(), sc.nextInt() }; // 첫번째 좌표
        int[] B = { sc.nextInt(), sc.nextInt() }; // 2번째 좌표
        int[] C = { sc.nextInt(), sc.nextInt() }; // 3번째 좌표

        int x;
        int y;

        if (A[0] == B[0]) {
            x = C[0];
        } else if (A[0] == C[0]) {
            x = B[0];
        } else {
            x = A[0];
        }

        if (A[1] == B[1]) {
            y = C[1];
        } else if (A[1] == C[1]) {
            y = B[1];
        } else {
            y = A[1];
        }

        System.out.println(x + " " + y);

    }
}

// 1085번 //
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

/**
 * Main
 */
/**
 * Main
 */
public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int x = sc.nextInt();
        int y = sc.nextInt();
        int w = sc.nextInt();
        int h = sc.nextInt();

        int x_min = Math.min(x, w - x); // 값중 제일 작은거 선택
        int y_min = Math.min(y, h - y); // 값중 제일 작은거 선택

        // x y 값 중 제일 작은거 선택
        System.out.println(Math.min(x_min, y_min));

    }
}

// 11653번 //
import java.util.Scanner;
 
public class Main {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
        
		int N = in.nextInt();
 
		for (int i = 2; i <= Math.sqrt(N); i++) {	// 또는 i * i <= N
			while (N % i == 0) {
				System.out.println(i);
				N /= i;
			}
		}
		if (N != 1) { // 1일때
			System.out.println(N);
		}
	}
}

// 4153번 //
import java.util.Arrays;
import java.util.Scanner;

/**
 * Main
 */
public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[] arr = new double[3];

        while (true) {
            for (int i = 0; i < 3; i++) {
                arr[i] = sc.nextDouble();
            }
            Arrays.sort(arr); // 오름차순 정렬

            if (arr[2] == 0 && arr[1] == 0 && arr[0] == 0) {
                break;
            }
            int resultA = (int) Math.pow(arr[2], 2);
            int resultB = (int) Math.pow(arr[1], 2);
            int resultC = (int) Math.pow(arr[0], 2);

            if (resultA == (resultB + resultC)) {
                System.out.println("right");
                continue;
            } else {
                System.out.println("wrong");
                continue;
            }
        }
    }
}

// 3053번 //
import java.text.Format;
import java.util.Scanner;

/**
 * Main
 */
public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int R = sc.nextInt();

        double UC = Math.PI * R * R;
        double Tax = 2 * Math.pow(R, 2);

        System.out.println(String.format("%.6f", UC));
        System.out.println(String.format("%.6f", Tax));
    }
}

// 1978번 //
import java.util.Scanner;

/**
 * Main
 */
public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt();
        int count = 0;

        for (int i = 0; i < N; i++) {
            boolean isprime = true; // 소수일때 참
            int n = sc.nextInt();
            if (n == 1) {
                continue;
            }
            for (int j = 2; j <= Math.sqrt(n); j++) {
                if (n % j == 0) {
                    isprime = false;
                    break;
                }
            }
            if (isprime) {
                count++;
            }
        }
        System.out.println(count);
    }
}
// 1929번 //
import java.util.Scanner;

/**
 * Main
 */
public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int M = sc.nextInt();
        int N = sc.nextInt();

        while (M <= N) {
            boolean isprime = true; // 참 거짓 판별

            if (M == 1) {
                M++;
                continue;
            }
            for (int i = 2; i <= Math.sqrt(M); i++) {	// 소수를 구하는 방법
                if (M % i == 0) {
                    isprime = false;
                    M++;
                    break;
                }
            }
            if (isprime) {
                System.out.println(M);
                M++;
            }
        }
    }
}



// 1002번 //
import java.util.Scanner;
 
public class Main {
	public static void main(String[] args) {
 
		Scanner in = new Scanner(System.in);
 
 
		int T = in.nextInt();
 
		while (T-- > 0) {
 
			int x1 = in.nextInt();
			int y1 = in.nextInt();
			int r1 = in.nextInt();
 
			int x2 = in.nextInt();
			int y2 = in.nextInt();
			int r2 = in.nextInt();
			
			System.out.println(tangent_point(x1, y1, r1, x2, y2, r2));
		}
 
	}
 
 
	// 접점 개수 구하는 함수
	public static int tangent_point(int x1, int y1, int r1, int x2, int y2, int r2) {
    
		int distance_pow = (int)(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));	// 중점간 거리 distance의 제곱 
 
 
		// case 1 : 중점이 같으면서 반지름도 같을 경우
		if(x1 == x2 && y1 == y2 && r1 == r2) {
			return -1;
		}
		
		// case 2-1 : 두 원의 반지름 합보다 중점간 거리가 더 길 때 
		else if(distance_pow > Math.pow(r1 + r2, 2)) {
			return 0;
		}
 
		// case 2-2 : 원 안에 원이 있으나 내접하지 않을 때 
		else if(distance_pow < Math.pow(r2 - r1, 2)) {
			return 0;
		}
		
		// case 3-1 : 내접할 때 
		else if(distance_pow == Math.pow(r2 - r1, 2)) {
			return 1;
		}
        
		
		// case 3-2 : 외접할 때 
		else if(distance_pow == Math.pow(r1 + r2, 2)) {
			return 1;
		}
		
		else {
			return 2;
		}
		
	}
 
}
